<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bobbyCarrot</title>
    <url>/2021/02/02/bobbyCarrot/</url>
    <content><![CDATA[<h2 id="（一）游戏制作的背景"><a href="#（一）游戏制作的背景" class="headerlink" title="（一）游戏制作的背景"></a>（一）游戏制作的背景</h2><p>有些经典的游戏在岁月中静躺了多年，每当再次打开的时候，总能给人满满的回忆<br>而且， 历久弥新，先看一张图：<br><img src="/img/oldPhone.jpg" alt=""><br>这是三星曾经一款非常流行的手机-Anycall,在十五多年前谁要是有这么一款手机，那简直太有面了，手机的里面有两款用Java写的游戏，多年后知到java是一门编程语言并学习后才知道为什么java这个字眼这么熟悉原来是因为这款手机里的那两个游戏</p>
<h2 id="（二）在一个不眠之夜"><a href="#（二）在一个不眠之夜" class="headerlink" title="（二）在一个不眠之夜"></a>（二）在一个不眠之夜</h2><p>刚写完java代码的我拖着疲惫的身体上了床，在差点要睡着的时候，一个想法迸射了出来<br><strong>我要把那个兔子游戏(bobby carrot)搬到互联网上，让朋友家人也能够玩到这个15年前的岁月游戏</strong></p>
<h2 id="（三）用一周的时间实现了这个想法"><a href="#（三）用一周的时间实现了这个想法" class="headerlink" title="（三）用一周的时间实现了这个想法"></a>（三）用一周的时间实现了这个想法</h2><p><strong>没错，就是一周，30个关卡，并自己设计制作了画面,点击下面的图片就可以玩</strong><br><a href="https://bobbygo.gitee.io"><img src="/img/logo.png" alt=""></a></p>
<h2 id="（四）就这样"><a href="#（四）就这样" class="headerlink" title="（四）就这样"></a>（四）就这样</h2>]]></content>
  </entry>
  <entry>
    <title>cPlusPlusLinkList</title>
    <url>/2021/01/19/cPlusPlusLinkList/</url>
    <content><![CDATA[<h2 id="数据结构之链表-C-实现"><a href="#数据结构之链表-C-实现" class="headerlink" title="数据结构之链表(C++实现)"></a>数据结构之链表(C++实现)</h2><ul>
<li><p>链表表示的是一种数据结构，跟语言没有强相关性</p>
</li>
<li><p>如果我们需要实现一个链表，首先最关键的就是<strong>节点，</strong>一个节点表示链表的一个<strong>数据存储点</strong>，链表是由很多个节点组成的</p>
</li>
<li><p>链表还需要很多线把很多节点串联在一起，<strong>可以用数组的特性串联，也可以用指针串联。</strong></p>
</li>
</ul>
<ul>
<li>代码完整实现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// Node Class</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>  T data;<br>  Node&lt;T&gt; *next;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>  LinkList();<br>  ~LinkList();<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CreateLinkList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DestroyLinkList</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">TravalLinkList</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InsertLinkList</span><span class="hljs-params">(Node&lt;T&gt; *data, <span class="hljs-keyword">int</span> n)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DeleteLinkList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetLength</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span></span>;<br><br>  Node&lt;T&gt; *head; <span class="hljs-comment">// link list head</span><br>  <span class="hljs-keyword">int</span> size;   <span class="hljs-comment">// link list length</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>LinkList&lt;T&gt;::LinkList()<br>&#123;<br>  head = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>  T temp;<br>  head-&gt;data = temp;<br>  head-&gt;next = <span class="hljs-literal">NULL</span>;<br>  size = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>LinkList&lt;T&gt;::~LinkList()<br>&#123;<br>  <span class="hljs-keyword">delete</span> head;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> LinkList&lt;T&gt;::CreateLinkList(<span class="hljs-keyword">int</span> n)<br>&#123;<br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;error&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  Node&lt;T&gt; *ptemp = <span class="hljs-literal">NULL</span>;<br>  Node&lt;T&gt; *pnew = <span class="hljs-literal">NULL</span>;<br><br>  <span class="hljs-keyword">this</span>-&gt;size = n;<br>  ptemp = <span class="hljs-keyword">this</span>-&gt;head;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>  &#123;<br>    pnew = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>    pnew-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Please input the &quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;th node value&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; pnew-&gt;data;<br>    ptemp-&gt;next = pnew;<br>    ptemp = pnew;<br>  &#125;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;linkedList create ok&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> LinkList&lt;T&gt;::DestroyLinkList()<br>&#123;<br>  Node&lt;T&gt; *ptemp;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;head == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;linkedList is empty&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-keyword">this</span>-&gt;head)<br>  &#123;<br>    ptemp = head-&gt;next;<br>    <span class="hljs-built_in">free</span>(head);<br>    head = ptemp;<br>  &#125;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;destroy linkedList ok&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> LinkList&lt;T&gt;::TravalLinkList()<br>&#123;<br>  Node&lt;T&gt; *ptemp = <span class="hljs-keyword">this</span>-&gt;head-&gt;next;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;head == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;link list is empty&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (ptemp)<br>  &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ptemp-&gt;data &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>    ptemp = ptemp-&gt;next;<br>  &#125;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NULL&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> LinkList&lt;T&gt;::InsertLinkList(Node&lt;T&gt; *data, <span class="hljs-keyword">int</span> n)<br>&#123;<br>  Node&lt;T&gt; *ptemp;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;head == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;link list is empty&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;insert node is empty&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-comment">// header insert</span><br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<br>  &#123;<br>    Node&lt;T&gt; *pnew = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>    pnew-&gt;data = data-&gt;data;<br>    pnew-&gt;next = <span class="hljs-keyword">this</span>-&gt;head-&gt;next;<br>    <span class="hljs-keyword">this</span>-&gt;head-&gt;next = pnew;<br>    <span class="hljs-keyword">this</span>-&gt;size++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-comment">// tail insert</span><br>  <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-keyword">this</span>-&gt;size)<br>  &#123;<br>    ptemp = <span class="hljs-keyword">this</span>-&gt;head;<br>    <span class="hljs-keyword">while</span> (ptemp-&gt;next != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      ptemp = ptemp-&gt;next;<br>    &#125;<br>    Node&lt;T&gt; *pnew = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>    pnew-&gt;data = data-&gt;data;<br>    pnew-&gt;next = <span class="hljs-literal">NULL</span>;<br>    ptemp-&gt;next = pnew;<br>    <span class="hljs-keyword">this</span>-&gt;size++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-comment">// middle insert</span><br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    ptemp = <span class="hljs-keyword">this</span>-&gt;head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>      ptemp = ptemp-&gt;next;<br>    &#125;<br>    Node&lt;T&gt; *pnew = <span class="hljs-keyword">new</span> Node&lt;T&gt;;<br>    pnew-&gt;data = data-&gt;data;<br>    pnew-&gt;next = ptemp-&gt;next;<br>    ptemp-&gt;next = pnew;<br>    <span class="hljs-keyword">this</span>-&gt;size++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> LinkList&lt;T&gt;::DeleteLinkList(<span class="hljs-keyword">int</span> n)<br>&#123;<br>  Node&lt;T&gt; *ptemp;<br>  Node&lt;T&gt; *ptemp2;<br>  <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-keyword">this</span>-&gt;size)<br>  &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;n too big&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-comment">// delete head node</span><br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<br>  &#123;<br>    ptemp = <span class="hljs-keyword">this</span>-&gt;head-&gt;next;<br>    <span class="hljs-keyword">this</span>-&gt;head-&gt;next = ptemp-&gt;next;<br>    <span class="hljs-built_in">free</span>(ptemp);<br>    <span class="hljs-keyword">this</span>-&gt;size--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-comment">// tail delete</span><br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-keyword">this</span>-&gt;size)<br>  &#123;<br>    ptemp = <span class="hljs-keyword">this</span>-&gt;head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;size; i++)<br>    &#123;<br>      ptemp = ptemp-&gt;next;<br>    &#125;<br>    ptemp2 = ptemp-&gt;next;<br>    ptemp-&gt;next = ptemp2-&gt;next;<br>    <span class="hljs-built_in">free</span>(ptemp2);<br>    <span class="hljs-keyword">this</span>-&gt;size--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-comment">// middle delete</span><br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    ptemp = <span class="hljs-keyword">this</span>-&gt;head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>      ptemp = ptemp-&gt;next;<br>    &#125;<br>    ptemp2 = ptemp-&gt;next;<br>    ptemp-&gt;next = ptemp2-&gt;next;<br>    <span class="hljs-built_in">free</span>(ptemp2);<br>    <span class="hljs-keyword">this</span>-&gt;size--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> LinkList&lt;T&gt;::GetLength()<br>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;size;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">bool</span> LinkList&lt;T&gt;::IsEmpty()<br>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;head == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Hello World!\n&quot;</span>;<br>  LinkList&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-built_in">list</span>;<br>  LinkList&lt;<span class="hljs-built_in">string</span>&gt; *plist = &amp;<span class="hljs-built_in">list</span>;<br>  <span class="hljs-keyword">int</span> linkListLength;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Please input linkedList length: &quot;</span>;<br>  <span class="hljs-built_in">cin</span> &gt;&gt; linkListLength;<br>  plist-&gt;CreateLinkList(linkListLength);<br>  plist-&gt;TravalLinkList();<br><br>  Node&lt;<span class="hljs-built_in">string</span>&gt; temp;<br>  temp.data = <span class="hljs-string">&quot;Hello&quot;</span>;<br>  temp.next = <span class="hljs-literal">NULL</span>;<br><br>  plist-&gt;InsertLinkList(&amp;temp, <span class="hljs-number">0</span>);<br>  plist-&gt;TravalLinkList();<br><br>  plist-&gt;InsertLinkList(&amp;temp, plist-&gt;GetLength() + <span class="hljs-number">1</span>);<br>  plist-&gt;TravalLinkList();<br><br>  plist-&gt;InsertLinkList(&amp;temp, <span class="hljs-number">3</span>);<br>  plist-&gt;TravalLinkList();<br><br>  plist-&gt;DeleteLinkList(<span class="hljs-number">0</span>);<br>  plist-&gt;TravalLinkList();<br><br>  plist-&gt;DeleteLinkList(<span class="hljs-number">4</span>);<br>  plist-&gt;TravalLinkList();<br><br>  plist-&gt;DestroyLinkList();<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li>效果</li>
</ul>
<p><img src="/img/linklist.png" alt="image"></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C++链表</tag>
      </tags>
  </entry>
  <entry>
    <title>C Plus Plus</title>
    <url>/2021/02/03/cpp1/</url>
    <content><![CDATA[<h1 id="C-的泛型程序设计思想"><a href="#C-的泛型程序设计思想" class="headerlink" title="C++ 的泛型程序设计思想"></a>C++ 的泛型程序设计思想</h1><ul>
<li>C++ 语言的核心优势之一就是便于软件的重用</li>
<li><p>C++中有两个方面体现重用：</p>
<ol>
<li>面向对象的思想：继承和多态，标准类库</li>
<li>泛型程序设计(generic programming) 的思想： 模板机<br>制，以及标准模板库 STL</li>
</ol>
<p>先看一段代码：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">string</span> string_hello = <span class="hljs-string">&quot;Hello&quot;</span>;<br>  string_hello += string_hello;<br>  <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; list_hello;<br>  list_hello.push_front(<span class="hljs-number">100</span>);<br>  list_hello.push_back(<span class="hljs-number">200</span>);<br>  <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator point;<br>  <span class="hljs-keyword">for</span>(point = list_hello.begin(); point != list_hello.end(); point++)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; *point &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vec;<br>  vec.push_back(<span class="hljs-number">23</span>);<br>  vec.push_back(<span class="hljs-number">89</span>);<br>  vec.push_back(<span class="hljs-number">123</span>);<br>  vec.push_back(<span class="hljs-number">333</span>);<br>  <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator p;<br>  vec.reserve(<span class="hljs-number">1000</span>);<br>  p = find(vec.begin(), vec.end(), <span class="hljs-number">333</span>);<br>  <span class="hljs-keyword">if</span> (p != vec.end())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; vec.size() &lt;&lt;<span class="hljs-built_in">endl</span> &lt;&lt; vec.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">if</span> (!vec.empty()) &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Vector is not empty&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  &#125;<br>  vec.resize(<span class="hljs-number">2000</span>);<br>  <span class="hljs-built_in">cout</span> &lt;&lt; vec.capacity() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; arrays&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>  <span class="hljs-function">ostream_iterator&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">it</span><span class="hljs-params">(<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot; &quot;</span>)</span></span>;<br>  copy(arrays.begin(), arrays.end(), it);<br>  <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; deq1&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>  <span class="hljs-function">ostream_iterator&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">its</span><span class="hljs-params">(<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot; &quot;</span>)</span></span>;<br>  copy(deq1.begin(), deq1.end(), its);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>Python learning</title>
    <url>/2020/12/17/first-blog/</url>
    <content><![CDATA[<ul>
<li>python可以用来帮助我们做很多事情，比如说帮我们通过两张50*50的小图片随机生成一张好看的游戏地图</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Tuple, List<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">csv_read</span>(<span class="hljs-params">csv_name</span>):</span><br>    map_mat: List[List] = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_name)<span class="hljs-keyword">as</span> f:<br>        f_csv = csv.reader(f)<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> f_csv:<br>            map_mat.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> item: <span class="hljs-built_in">int</span>(item), row)))<br>    <span class="hljs-keyword">return</span> map_mat<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>() -&gt; <span class="hljs-keyword">None</span>:</span><br>    image_grass_list = <span class="hljs-built_in">list</span>()<br>    bg_name_list = os.listdir(<span class="hljs-string">&quot;./newS/bg&quot;</span>)<br>    image_soil_list = <span class="hljs-built_in">list</span>()<br>    soil_name_list = os.listdir(<span class="hljs-string">&quot;./newS/soil&quot;</span>)<br>    <span class="hljs-keyword">for</span> bg_name <span class="hljs-keyword">in</span> bg_name_list:<br>        image_grass_list.append(cv2.imread(<span class="hljs-string">&quot;./newS/bg/&quot;</span> + bg_name))<br>    <span class="hljs-keyword">for</span> soil_name <span class="hljs-keyword">in</span> soil_name_list:<br>        image_soil_list.append(cv2.imread(<span class="hljs-string">&quot;./newS/soil/&quot;</span> + soil_name))<br>    print(soil_name_list)<br>    csv_name_list = os.listdir(<span class="hljs-string">&quot;./mapCSVTemp&quot;</span>)<br><br>    <span class="hljs-comment"># sorted(csv_name_list, key=lambda item: int(item[3:-4]))</span><br>    <span class="hljs-keyword">for</span> csv_name <span class="hljs-keyword">in</span> csv_name_list:<br>        map_mat = np.array(csv_read(<span class="hljs-string">&quot;./mapCSVTemp/&quot;</span> + csv_name))<br>        height, width = map_mat.shape<br>        <span class="hljs-built_in">map</span> = np.zeros((height*<span class="hljs-number">50</span>, width*<span class="hljs-number">50</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-built_in">int</span>)<br>        <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(map_mat):<br>            <span class="hljs-keyword">for</span> j, sign <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row):<br>                <span class="hljs-keyword">if</span> sign:<br>                    soil_sign = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(soil_name_list)-<span class="hljs-number">1</span>)<br>                    <span class="hljs-built_in">map</span>[i*<span class="hljs-number">50</span>:(i*<span class="hljs-number">50</span>+<span class="hljs-number">50</span>), j*<span class="hljs-number">50</span>:(j*<span class="hljs-number">50</span> + <span class="hljs-number">50</span>)<br>                        ] = image_soil_list[soil_sign]<br>                <span class="hljs-keyword">else</span>:<br>                    bg_sign = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bg_name_list)-<span class="hljs-number">1</span>)<br>                    <span class="hljs-built_in">map</span>[i*<span class="hljs-number">50</span>:(i*<span class="hljs-number">50</span>+<span class="hljs-number">50</span>), j*<span class="hljs-number">50</span>:(j*<span class="hljs-number">50</span> + <span class="hljs-number">50</span>)<br>                        ] = image_grass_list[bg_sign]<br>        cv2.imwrite(<span class="hljs-string">&#x27;./mapTemp/&#x27;</span> + <span class="hljs-string">&quot;map30.png&quot;</span>,<br>                    <span class="hljs-built_in">map</span>, [<span class="hljs-built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="hljs-number">9</span>])<br>    print(<span class="hljs-string">&quot;Map Ready Ok !&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>cv2</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>How to use javap?</title>
    <url>/2021/01/22/java/</url>
    <content><![CDATA[<h2 id="Javap-Use"><a href="#Javap-Use" class="headerlink" title="Javap Use"></a>Javap Use</h2><p>javap 是JDK自带的反汇编器，可以查看java编译器为我们生成的字节码。<br>语法：</p>
<ul>
<li>javap [ 命令选项 ] class. . .</li>
<li>javap 命令用于解析类文件。其输出取决于所用的选项</li>
</ul>
<p>命令选项</p>
<ul>
<li>-help 输出 javap 的帮助信息。</li>
<li>-l 输出行及局部变量表。</li>
<li>-b 确保与 JDK 1.1 javap 的向后兼容性。</li>
<li>-public 只显示 public 类及成员。</li>
<li>-protected 只显示 protected 和 public 类及成员。</li>
<li>-package 只显示包、protected 和 public 类及成员。这是缺省设置。</li>
<li>-private 显示所有类和成员。</li>
<li>-J[flag] 直接将 flag 传给运行时系统。</li>
<li>-s 输出内部类型签名。</li>
<li>-c 输出类中各方法的未解析的代码，即构成 Java 字节码的指令。</li>
<li>-verbose 输出堆栈大小、各方法的 locals 及 args 数,以及class文件的编译版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">javac javaFile.java<br>javap -c javaFile<br></code></pre></td></tr></table></figure>
<p>反汇编成java字节码<br><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Compiled from <span class="hljs-string">&quot;Main.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Main</span><span class="hljs-params">()</span></span>;<br>    Code:<br>       <span class="hljs-number">0</span>: aload_0<br>       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>       <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(java.lang.String[])</span></span>;<br>    Code:<br>       0: new           #7                  // class java/util/ArrayList<br>       <span class="hljs-number">3</span>: dup<br>       4: invokespecial #9                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V<br>       <span class="hljs-number">7</span>: astore_1<br>       <span class="hljs-number">8</span>: aload_1<br>       9: ldc           #10                 // String Google<br>      11: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z<br>      <span class="hljs-number">14</span>: pop<br>      <span class="hljs-number">15</span>: aload_1<br>      16: ldc           #16                 // String Runoob<br>      18: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z<br>      <span class="hljs-number">21</span>: pop<br>      <span class="hljs-number">22</span>: aload_1<br>      23: ldc           #18                 // String Taobao<br>      25: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z<br>      <span class="hljs-number">28</span>: pop<br>      <span class="hljs-number">29</span>: aload_1<br>      30: ldc           #20                 // String Weibo<br>      32: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z<br>      <span class="hljs-number">35</span>: pop<br>      36: new           #22                 // class test/Person<br>      <span class="hljs-number">39</span>: dup<br>      40: ldc           #24                 // String wuxiang<br>      42: ldc           #26                 // String male<br>      <span class="hljs-number">44</span>: aload_1<br>      45: invokespecial #28                 // Method test/Person.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V<br>      <span class="hljs-number">48</span>: astore_2<br>      49: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;<br>      <span class="hljs-number">52</span>: aload_2<br>      53: invokevirtual #37                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V<br>      56: new           #43                 // class java/lang/String<br>      <span class="hljs-number">59</span>: dup<br>      60: ldc           #45                 // String temp1<br>      62: invokespecial #47                 // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V<br>      <span class="hljs-number">65</span>: astore_3<br>      66: ldc           #45                 // String temp1<br>      <span class="hljs-number">68</span>: astore        <span class="hljs-number">4</span><br>      70: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;<br>      <span class="hljs-number">73</span>: aload_3<br>      <span class="hljs-number">74</span>: aload         <span class="hljs-number">4</span><br>      <span class="hljs-number">76</span>: if_acmpne     <span class="hljs-number">83</span><br>      <span class="hljs-number">79</span>: iconst_1<br>      <span class="hljs-number">80</span>: goto          <span class="hljs-number">84</span><br>      <span class="hljs-number">83</span>: iconst_0<br>      84: invokevirtual #50                 // Method java/io/PrintStream.println:(Z)V<br>      87: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;<br>      <span class="hljs-number">90</span>: aload_3<br>      91: invokevirtual #53                 // Method java/lang/String.hashCode:()I<br>      94: invokevirtual #57                 // Method java/io/PrintStream.println:(I)V<br>      97: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;<br>     <span class="hljs-number">100</span>: aload         <span class="hljs-number">4</span><br>     102: invokevirtual #53                 // Method java/lang/String.hashCode:()I<br>     105: invokevirtual #57                 // Method java/io/PrintStream.println:(I)V<br>     108: ldc           #60                 // String Hello<br>     <span class="hljs-number">110</span>: astore        <span class="hljs-number">4</span><br>     <span class="hljs-number">112</span>: bipush        <span class="hljs-number">100</span><br>     <span class="hljs-number">114</span>: istore        <span class="hljs-number">5</span><br>     116: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;<br>     <span class="hljs-number">119</span>: iload         <span class="hljs-number">5</span><br>     121: invokevirtual #57                 // Method java/io/PrintStream.println:(I)V<br>     <span class="hljs-number">124</span>: <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2021/02/05/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/img/code.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>出走半生，归来仍是菜鸟</title>
    <url>/2021/01/23/runoob/</url>
    <content><![CDATA[<h2 id="燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志"><a href="#燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志" class="headerlink" title="燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志"></a>燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志</h2><font face="Consolas" size=5>https://www.runoob.com/</font>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>runoob</tag>
      </tags>
  </entry>
  <entry>
    <title>optimization</title>
    <url>/2020/12/26/optimization/</url>
    <content><![CDATA[<h1 id="methods-of-optimization"><a href="#methods-of-optimization" class="headerlink" title="methods of optimization"></a>methods of optimization</h1><p><strong>作业 5.</strong> 设函数 $f:\mathbb{R}^n \to \mathbb{R}$ 连续二次可微，${x^k}$ 由某下降算法生成（即 $d^k$ 为下降方向），$\alpha_k$ 由Wolfe-Powell原则生成。已知 <script type="math/tex">x^k \to x^*</script>，并且 <script type="math/tex">\nabla f(x^*)=0,\nabla^2f(x^*)\mathbb{>}0</script>。令  </p>
<script type="math/tex; mode=display">
\delta_k := \frac{\Vert\nabla f(x^k)+\nabla^2f(x^k)d^k\Vert}{\Vert d^k \Vert}</script><p>如果 $\delta_k \to 0$，证明下述结论成立：<br>$\space$（1）当 $k$ 充分大时，必有步长 $\alpha_k=1;$<br>$\space$（2）序列 ${x^k}$ 超线性收敛。</p>
<blockquote>
<p>解答：（1）</p>
</blockquote>
]]></content>
      <categories>
        <category>计算数学</category>
        <category>运筹学</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>优化算法</tag>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>全排列输出（主流语言实现）</title>
    <url>/2021/02/27/whole-arrangement/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// C Call</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a, <span class="hljs-keyword">char</span> *b)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> temp = *a;<br>  *a = *b;<br>  *b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">whole_arrangement</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch[], <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> i;<br>  <span class="hljs-keyword">if</span> (k == len)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, ch);<br>    num++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;, &quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">for</span> (i = k; i &lt;= len; i++)<br>    &#123;<br>      swap(&amp;ch[k], &amp;ch[i]);<br>      whole_arrangement(ch, k + <span class="hljs-number">1</span>, len);<br>      swap(&amp;ch[k], &amp;ch[i]);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> ch[] = <span class="hljs-string">&quot;abc&quot;</span>;<br>  whole_arrangement(ch, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(ch) - <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nCOUNT: %d\n&quot;</span>, num);<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java Call</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    String ch = <span class="hljs-string">&quot;abc&quot;</span>;<br>    wholeArrangement(ch.toCharArray(), <span class="hljs-number">0</span>);<br><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wholeArrangement</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] ch, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span> (k == ch.length - <span class="hljs-number">1</span>) &#123;<br>      System.out.print(ch);<br>      System.out.print(<span class="hljs-string">&quot;, &quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">for</span> (i = k; i &lt;= ch.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">char</span> temp = ch[k];<br>        ch[k] = ch[i];<br>        ch[i] = temp;<br>        wholeArrangement(ch, k + <span class="hljs-number">1</span>);<br>        temp = ch[k];<br>        ch[k] = ch[i];<br>        ch[i] = temp;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python Call</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> List<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">whole_arrangement</span>(<span class="hljs-params">ch: List[<span class="hljs-built_in">str</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-keyword">None</span>:</span><br>    <span class="hljs-keyword">if</span> k == <span class="hljs-built_in">len</span>(ch):<br>        print(<span class="hljs-string">&quot;&quot;</span>.join(ch), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        print(<span class="hljs-string">&quot;, &quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k, <span class="hljs-built_in">len</span>(ch)):<br>            temp = ch[k]<br>            ch[k] = ch[i]<br>            ch[i] = temp<br>            whole_arrangement(ch, k+<span class="hljs-number">1</span>)<br>            temp = ch[k]<br>            ch[k] = ch[i]<br>            ch[i] = temp<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>() -&gt; <span class="hljs-keyword">None</span>:</span><br>    ch = <span class="hljs-string">&quot;abcde&quot;</span><br>    whole_arrangement(<span class="hljs-built_in">list</span>(ch), <span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/01/19/test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8ed604a79808fe364dc9bdfe511645bb90eec859296a5d9450b35815c513e77d">97e0dbde30c97b5c9b0d6b89e25836be46d8d59312712130d7c5a2620145cbb3a955c48d62387aed7a17b1f218509c72bed4635b25b1c5333223f8bf1ff7dd6d08d0d496fbcefa6bbe03269b2415263751822913eb9efdfec2e8a00abbcdec3bb726bdea78e69e7f6c1e41b97e703ff13d08a590bd18012b06d07149b726c3385bd1897319608d08e8b1b876839ac7ec</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>作为日记加密</tag>
      </tags>
  </entry>
</search>
