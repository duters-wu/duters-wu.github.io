<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cPlusPlusLinkList</title>
    <url>/2021/01/19/cPlusPlusLinkList/</url>
    <content><![CDATA[<h2 id="数据结构之链表-C-实现"><a href="#数据结构之链表-C-实现" class="headerlink" title="数据结构之链表(C++实现)"></a>数据结构之链表(C++实现)</h2><ul>
<li><p> 链表表示的是一种数据结构，跟语言没有强相关性</p>
</li>
<li><p>如果我们需要实现一个链表，首先最关键的就是<strong>节点，</strong>一个节点表示链表的一个<strong>数据存储点</strong>，链表是由很多个节点组成的</p>
</li>
<li><p>链表还需要很多线把很多节点串联在一起，<strong>可以用数组的特性串联，也可以用指针串联。</strong></p>
</li>
</ul>
<ul>
<li>代码完整实现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LinkList();</span><br><span class="line">    ~LinkList();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">CreateLinkList</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DestroyLinkList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">TravalLinkList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">InsertLinkList</span><span class="params">(Node *data, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DeleteLinkList</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Node* head; <span class="comment">// link list head</span></span><br><span class="line">    <span class="keyword">int</span> size; <span class="comment">// link list length</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LinkList::LinkList()</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> Node;</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkList::~LinkList()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList::CreateLinkList</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *ptemp = <span class="literal">NULL</span>;</span><br><span class="line">    Node* pnew = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;size = n;</span><br><span class="line">    ptemp = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pnew = <span class="keyword">new</span> Node;</span><br><span class="line">        pnew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个节点值&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pnew-&gt;data;</span><br><span class="line">        ptemp-&gt;next = pnew;</span><br><span class="line">        ptemp = pnew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;链表创建完成&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList::DestroyLinkList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* ptemp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;链表原本就为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>-&gt;head)</span><br><span class="line">    &#123;</span><br><span class="line">        ptemp = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        head = ptemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;销毁链表完成&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList::TravalLinkList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* ptemp = <span class="keyword">this</span>-&gt;head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;链表为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ptemp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ptemp-&gt;data &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">        ptemp = ptemp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NULL&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList::InsertLinkList</span><span class="params">(Node* data, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* ptemp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;链表为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入节点为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 头部插入</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        Node* pnew = <span class="keyword">new</span> Node;</span><br><span class="line">        pnew-&gt;data = data-&gt;data;</span><br><span class="line">        pnew-&gt;next = <span class="keyword">this</span>-&gt;head-&gt;next;</span><br><span class="line">        <span class="keyword">this</span>-&gt;head-&gt;next = pnew;</span><br><span class="line">        <span class="keyword">this</span>-&gt;size++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾部插入</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="keyword">this</span>-&gt;size) &#123;</span><br><span class="line">        ptemp = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">while</span> (ptemp-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ptemp = ptemp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* pnew = <span class="keyword">new</span> Node;</span><br><span class="line">        pnew-&gt;data = data-&gt;data;</span><br><span class="line">        pnew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        ptemp-&gt;next = pnew;</span><br><span class="line">        <span class="keyword">this</span>-&gt;size++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中间插入</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ptemp = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ptemp = ptemp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* pnew = <span class="keyword">new</span> Node;</span><br><span class="line">        pnew-&gt;data = data-&gt;data;</span><br><span class="line">        pnew-&gt;next = ptemp-&gt;next;</span><br><span class="line">        ptemp-&gt;next = pnew;</span><br><span class="line">        <span class="keyword">this</span>-&gt;size++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList::DeleteLinkList</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* ptemp;</span><br><span class="line">    Node* ptemp2;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="keyword">this</span>-&gt;size) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;n太大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删头节点</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        ptemp = <span class="keyword">this</span>-&gt;head-&gt;next;</span><br><span class="line">        <span class="keyword">this</span>-&gt;head-&gt;next = ptemp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(ptemp);</span><br><span class="line">        <span class="keyword">this</span>-&gt;size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾部删除</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="keyword">this</span>-&gt;size) &#123;</span><br><span class="line">        ptemp = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>-&gt;size; i++) &#123;</span><br><span class="line">            ptemp = ptemp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ptemp2 = ptemp-&gt;next;</span><br><span class="line">        ptemp-&gt;next = ptemp2-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(ptemp2);</span><br><span class="line">        <span class="keyword">this</span>-&gt;size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 中间删除</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ptemp = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ptemp = ptemp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ptemp2 = ptemp-&gt;next;</span><br><span class="line">        ptemp-&gt;next = ptemp2-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(ptemp2);</span><br><span class="line">        <span class="keyword">this</span>-&gt;size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinkList::GetLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LinkList::IsEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">    LinkList <span class="built_in">list</span>;</span><br><span class="line">    LinkList* plist = &amp;<span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">int</span> linkListLength;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入链表初始长度：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; linkListLength;</span><br><span class="line">    plist-&gt;CreateLinkList(linkListLength);</span><br><span class="line">    plist-&gt;TravalLinkList();</span><br><span class="line"></span><br><span class="line">    Node temp;</span><br><span class="line">    temp.data = <span class="number">619</span>;</span><br><span class="line">    temp.next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    plist-&gt;InsertLinkList(&amp;temp, <span class="number">0</span>);</span><br><span class="line">    plist-&gt;TravalLinkList();</span><br><span class="line"></span><br><span class="line">    plist-&gt;InsertLinkList(&amp;temp, plist-&gt;GetLength() + <span class="number">1</span>);</span><br><span class="line">    plist-&gt;TravalLinkList();</span><br><span class="line"></span><br><span class="line">    plist-&gt;InsertLinkList(&amp;temp, <span class="number">3</span>);</span><br><span class="line">    plist-&gt;TravalLinkList();</span><br><span class="line"></span><br><span class="line">    plist-&gt;DeleteLinkList(<span class="number">0</span>);</span><br><span class="line">    plist-&gt;TravalLinkList();</span><br><span class="line"></span><br><span class="line">    plist-&gt;DeleteLinkList(<span class="number">4</span>);</span><br><span class="line">    plist-&gt;TravalLinkList();</span><br><span class="line"></span><br><span class="line">    plist-&gt;DestroyLinkList();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>效果</li>
</ul>
<p><img src="C:\Users\wuxiang\AppData\Roaming\Typora\typora-user-images\image-20201228115000970.png" alt="image-20201228115000970"></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C++链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python learning</title>
    <url>/2020/12/17/first-blog/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>() -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __main__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>How to use javap?</title>
    <url>/2021/01/22/java/</url>
    <content><![CDATA[<h2 id="Javap-Use"><a href="#Javap-Use" class="headerlink" title="Javap Use"></a>Javap Use</h2><p>javap 是JDK自带的反汇编器，可以查看java编译器为我们生成的字节码。<br>语法：</p>
<ul>
<li>javap [ 命令选项 ] class. . .</li>
<li>javap 命令用于解析类文件。其输出取决于所用的选项</li>
</ul>
<p>命令选项</p>
<ul>
<li>-help 输出 javap 的帮助信息。</li>
<li>-l 输出行及局部变量表。</li>
<li>-b 确保与 JDK 1.1 javap 的向后兼容性。</li>
<li>-public 只显示 public 类及成员。</li>
<li>-protected 只显示 protected 和 public 类及成员。</li>
<li>-package 只显示包、protected 和 public 类及成员。这是缺省设置。</li>
<li>-private 显示所有类和成员。</li>
<li>-J[flag] 直接将 flag 传给运行时系统。</li>
<li>-s 输出内部类型签名。</li>
<li>-c 输出类中各方法的未解析的代码，即构成 Java 字节码的指令。</li>
<li>-verbose 输出堆栈大小、各方法的 locals 及 args 数,以及class文件的编译版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac javaFile.java</span><br><span class="line">javap -c javaFile</span><br></pre></td></tr></table></figure>
<p>反汇编成java字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;Main.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #7                  // class java/util/ArrayList</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokespecial #9                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: aload_1</span><br><span class="line">       9: ldc           #10                 // String Google</span><br><span class="line">      11: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">14</span>: pop</span><br><span class="line">      <span class="number">15</span>: aload_1</span><br><span class="line">      16: ldc           #16                 // String Runoob</span><br><span class="line">      18: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">21</span>: pop</span><br><span class="line">      <span class="number">22</span>: aload_1</span><br><span class="line">      23: ldc           #18                 // String Taobao</span><br><span class="line">      25: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">28</span>: pop</span><br><span class="line">      <span class="number">29</span>: aload_1</span><br><span class="line">      30: ldc           #20                 // String Weibo</span><br><span class="line">      32: invokevirtual #12                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">35</span>: pop</span><br><span class="line">      36: new           #22                 // class test/Person</span><br><span class="line">      <span class="number">39</span>: dup</span><br><span class="line">      40: ldc           #24                 // String wuxiang</span><br><span class="line">      42: ldc           #26                 // String male</span><br><span class="line">      <span class="number">44</span>: aload_1</span><br><span class="line">      45: invokespecial #28                 // Method test/Person.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V</span><br><span class="line">      <span class="number">48</span>: astore_2</span><br><span class="line">      49: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">52</span>: aload_2</span><br><span class="line">      53: invokevirtual #37                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">      56: new           #43                 // class java/lang/String</span><br><span class="line">      <span class="number">59</span>: dup</span><br><span class="line">      60: ldc           #45                 // String temp1</span><br><span class="line">      62: invokespecial #47                 // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">65</span>: astore_3</span><br><span class="line">      66: ldc           #45                 // String temp1</span><br><span class="line">      <span class="number">68</span>: astore        <span class="number">4</span></span><br><span class="line">      70: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">73</span>: aload_3</span><br><span class="line">      <span class="number">74</span>: aload         <span class="number">4</span></span><br><span class="line">      <span class="number">76</span>: if_acmpne     <span class="number">83</span></span><br><span class="line">      <span class="number">79</span>: iconst_1</span><br><span class="line">      <span class="number">80</span>: goto          <span class="number">84</span></span><br><span class="line">      <span class="number">83</span>: iconst_0</span><br><span class="line">      84: invokevirtual #50                 // Method java/io/PrintStream.println:(Z)V</span><br><span class="line">      87: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">90</span>: aload_3</span><br><span class="line">      91: invokevirtual #53                 // Method java/lang/String.hashCode:()I</span><br><span class="line">      94: invokevirtual #57                 // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      97: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">100</span>: aload         <span class="number">4</span></span><br><span class="line">     102: invokevirtual #53                 // Method java/lang/String.hashCode:()I</span><br><span class="line">     105: invokevirtual #57                 // Method java/io/PrintStream.println:(I)V</span><br><span class="line">     108: ldc           #60                 // String Hello</span><br><span class="line">     <span class="number">110</span>: astore        <span class="number">4</span></span><br><span class="line">     <span class="number">112</span>: bipush        <span class="number">100</span></span><br><span class="line">     <span class="number">114</span>: istore        <span class="number">5</span></span><br><span class="line">     116: getstatic     #31                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">     <span class="number">119</span>: iload         <span class="number">5</span></span><br><span class="line">     121: invokevirtual #57                 // Method java/io/PrintStream.println:(I)V</span><br><span class="line">     <span class="number">124</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>出走半生，归来仍是菜鸟</title>
    <url>/2021/01/23/runoob/</url>
    <content><![CDATA[<h2 id="燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志"><a href="#燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志" class="headerlink" title="燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志"></a>燕雀安知鸿鹄之志，鸿鹄安知菜鸟之志</h2><p><font face="Consolas" size=5><a href="https://www.runoob.com/">-&gt;RUNOOB.COM</a></font></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>runoob</tag>
      </tags>
  </entry>
  <entry>
    <title>optimization</title>
    <url>/2020/12/26/optimization/</url>
    <content><![CDATA[<h1 id="methods-of-optimization"><a href="#methods-of-optimization" class="headerlink" title="methods of optimization"></a>methods of optimization</h1><p><strong>作业 5.</strong> 设函数 $ f:\mathbb{R}^n \to \mathbb{R}$ 连续二次可微，$ {x^k}$ 由某下降算法生成（即 $d^k$ 为下降方向），$\alpha_k$ 由Wolfe-Powell原则生成。已知   $x^k \to x^*$，并且 $\nabla f(x^*)=0,\nabla^2f(x^*)\mathbb{&gt;}0$。令<br>$$<br>\delta_k := \frac{\Vert\nabla f(x^k)+\nabla^2f(x^k)d^k\Vert}{\Vert d^k \Vert}<br>$$<br>如果 $\delta_k \to 0$，证明下述结论成立：<br>$\space$（1）当 $k$ 充分大时，必有步长 $\alpha_k=1;$<br>$\space$（2）序列 ${x^k}$ 超线性收敛。</p>
<blockquote>
<p>解答：（1）</p>
</blockquote>
<h1 id="C-周期发生器"><a href="#C-周期发生器" class="headerlink" title="C++ 周期发生器"></a>C++ 周期发生器</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val, gen();</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Signal Is:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        val = gen();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%*c\n&quot;</span>, val, val + <span class="number">1</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="number">0</span>)</span><br><span class="line">            k++;</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> top = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirction = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i==top+<span class="number">1</span>) &#123;dirction = <span class="number">-1</span>; i -= <span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">-1</span>) &#123;dirction = <span class="number">1</span>; i += <span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;=top &amp;&amp; dirction==<span class="number">1</span>) <span class="keyword">return</span> i++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算数学</category>
        <category>运筹学</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>优化算法</tag>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>股市如人生,炒股即做人</title>
    <url>/2020/12/26/stock/</url>
    <content><![CDATA[<h1 id="股市如人生-炒股即做人"><a href="#股市如人生-炒股即做人" class="headerlink" title="股市如人生,炒股即做人"></a>股市如人生,炒股即做人</h1><p>贪婪、恐惧、多疑、浮躁,人性的弱点都在股市中暴露无遗。可以说,炒股的过程就是锻炼人性的过程。当你的性格变得勇敢、冷静、专注、不悔时,你就达到了成功的顶峰。王国维说,人生有三种境界,分别用古人的三句诗词来形容,我看放在股市也挺合适。</p>
<ul>
<li>第一境界：<code>昨夜西风凋碧树,独上高楼,望尽天涯路。</code>初入股市的股民新鲜好奇,谦虚好学,大部分希望通过自己的小聪明,使自己的资金保值增值。开始因为什么也不懂,所以小心翼翼,偶尔赚几个小钱,也赚得糊里糊涂,于是下定决心,一定要搞明白这股市涨落的规律,做第二个巴菲特、杨百万！</li>
<li>第二境界：<code>为伊消得人憔悴,衣带渐宽终不悔。</code>终于看懂了K线图,明白了成交量,知道了波浪理论,但好运气却不再光顾。每日盯着电脑屏幕数波浪,查找各种技术指标,追涨杀跌,博取差价。有时也能刀口舔血赚一把,更多的是亡命奔逃,伤痕累累。有的人天天打听小道消息、市场传闻,听著名股评家推荐所谓黑马,可是买了就套,卖了就涨,着急又上火,资金渐少事小,连人也瘦了三圈。</li>
<li>第三境界：<code>众里寻她千百度,蓦然回首,那人却在灯火珊阑处。</code>当你发现一只基本面不错的股票,盘子不大,股价却尚在低位,但不是当前热点也没有人推荐。“古来圣贤皆寂寞”,像海虹、亿安这类大牛股,在灯火珊阑处徘徊时,又有谁去寻她千百度呢？达到这第三境界的人可谓凤毛麟角,他们做股票从容不迫,进退自如,连最阴险的庄家也无计可施。俗语云“与其临渊羡鱼,不如退而结网”,明白了自己处于哪一个层次,就应该不断学习, 更新理念,超越自我,锻炼自己的信心、耐心、平常心。</li>
</ul>
<p>金融投机的生态是存在即是合理，长线有长线的优势，短线有短线的技巧，抄底有抄底的理由，追高有追高的说法，你可以不去追求完美的长短高低结合，但是必须得有一手用的顺手的交易模式，这是生存的前提。</p>
<p>对于市场行情的分析，无论多么完美的纸面交易理论都有失效的时候，甚至是大部分时间都在失效，同时这也是交易者唯一能选择学来用的东西，很多人眼里他是一把宝剑，实际上他只是一块废铁，只不过一个优秀的交易者，也能把这块废铁用出宝剑的效果，因为他知道怎么样把自己的特长与交易技术的特点揉合到一起，当然这离不开一个最基本的思维辩证能力，这也是交易者必须要具备的一项能力，从看山是山，看水是水到看山不是山，看水不是水，再回到看山是山，看水是水，不是技术的进步，而是思维的升华。</p>
<p>投机，最离不开的是思考，你不能假物于人，交易之行，与一匹茫茫原野独行的孤狼，一路无伴，只有一个未知的尽头，在孤独的处境里尚不失独立的思考，这是另一种能力，从交易之术到交易之道就像“习得招式万千，只为一朝忘却，招由境生，剑随心动”，所学不是无用，只是不用，只是用心，作为一种群居性动物，人习惯了组织社会，独自面对那种市场不确定性时候的痛苦，心理承受力很容易达到一种极限，这种双重压力很容易造成交易者的操作失控，这也是很多交易者整个职业生涯都迈不过的槛，所谓交易的成长，只是比以前更能承受心理的痛苦罢了。</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th align="center">左对齐</th>
<th align="center">右对齐</th>
<th align="center">居中对齐</th>
<th align="center">左对齐</th>
<th align="center">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>股市</category>
      </categories>
      <tags>
        <tag>stock</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/01/19/test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8ed604a79808fe364dc9bdfe511645bb90eec859296a5d9450b35815c513e77d">97e0dbde30c97b5c9b0d6b89e25836be46d8d59312712130d7c5a2620145cbb3a955c48d62387aed7a17b1f218509c72bed4635b25b1c5333223f8bf1ff7dd6d08d0d496fbcefa6bbe03269b2415263751822913eb9efdfec2e8a00abbcdec3bb726bdea78e69e7f6c1e41b97e703ff13d08a590bd18012b06d07149b726c3385bd1897319608d08e8b1b876839ac7ec</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>作为日记加密</tag>
      </tags>
  </entry>
</search>
